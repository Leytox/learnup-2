// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DATABASE_URL")
}

model User {
  id            String             @id @default(cuid())
  email         String             @unique
  emailVerified DateTime?
  password      String?
  name          String?
  image         String?
  enrolled      CourseEnrollment[]
  accounts      Account[]
  sessions      Session[]
  cart          Cart?              @relation(fields: [cartId], references: [id])
  cartId        Int?
  Course        Course[]

  role      Role     @default(STUDENT)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Cart {
  id        Int        @id @default(autoincrement())
  items     CartItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  User      User[]
}

model CartItem {
  id        Int      @id @default(autoincrement())
  cart      Cart     @relation(fields: [cartId], references: [id])
  cartId    Int
  course    Course   @relation(fields: [courseId], references: [id])
  courseId  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Course {
  id           Int                @id @default(autoincrement())
  title        String
  description  String?
  instructor   User               @relation(fields: [instructorId], references: [id])
  instructorId String
  lessons      Lesson[]
  enrollments  CourseEnrollment[]
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt
  cartId       Int?
  CartItem     CartItem[]
}

model Lesson {
  id        Int      @id @default(autoincrement())
  title     String
  content   String?
  course    Course   @relation(fields: [courseId], references: [id])
  courseId  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CourseEnrollment {
  id         Int      @id @default(autoincrement())
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  course     Course   @relation(fields: [courseId], references: [id])
  courseId   Int
  enrolledAt DateTime @default(now())
}

enum Role {
  STUDENT
  INSTRUCTOR
  ADMIN
}
